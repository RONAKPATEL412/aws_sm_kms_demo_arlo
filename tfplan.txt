
Administrator@DhruvRana-Lap MINGW64 ~/Workspace/Arlo/irobot/terraform/aws_secrate_kms_demo_1/terraform-aws-secretsmanager-secret/examples/dummy-secret
$ terraform plan

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.secret.aws_kms_alias.aws_sm_dns_mapper_kms_key_alish will be created
  + resource "aws_kms_alias" "aws_sm_dns_mapper_kms_key_alish" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + name           = "alias/default_kms_alish"
      + name_prefix    = (known after apply)
      + target_key_arn = (known after apply)
      + target_key_id  = (known after apply)
    }

  # module.secret.aws_kms_key.aws_sm_dns_mapper_kms_key will be created
  + resource "aws_kms_key" "aws_sm_dns_mapper_kms_key" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + description                        = "My KMS Keys for Data Encryption"
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = jsonencode(
            {
              + Id        = "key-consolepolicy-3"
              + Statement = [
                  + {
                      + Action    = "kms:*"
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::047109936880:user/khong-aol"
                        }
                      + Resource  = "*"
                      + Sid       = "Enable IAM User Permissions"
                    },
                  + {
                      + Action    = [
                          + "kms:Create*",
                          + "kms:Describe*",
                          + "kms:Enable*",
                          + "kms:List*",
                          + "kms:Put*",
                          + "kms:Update*",
                          + "kms:Revoke*",
                          + "kms:Disable*",
                          + "kms:Get*",
                          + "kms:Delete*",
                          + "kms:TagResource",
                          + "kms:UntagResource",
                          + "kms:ScheduleKeyDeletion",
                          + "kms:CancelKeyDeletion",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::047109936880:user/khong-aol"
                        }
                      + Resource  = "*"
                      + Sid       = "Allow access for Key Administrators"
                    },
                  + {
                      + Action    = [
                          + "kms:Encrypt",
                          + "kms:Decrypt",
                          + "kms:ReEncrypt*",
                          + "kms:GenerateDataKey*",
                          + "kms:DescribeKey",
                        ]
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::047109936880:user/khong-aol"
                        }
                      + Resource  = "*"
                      + Sid       = "Allow use of the key"
                    },
                  + {
                      + Action    = [
                          + "kms:CreateGrant",
                          + "kms:ListGrants",
                          + "kms:RevokeGrant",
                        ]
                      + Condition = {
                          + Bool = {
                              + "kms:GrantIsForAWSResource" = "true"
                            }
                        }
                      + Effect    = "Allow"
                      + Principal = {
                          + AWS = "arn:aws:iam::047109936880:user/khong-aol"
                        }
                      + Resource  = "*"
                      + Sid       = "Allow attachment of persistent resources"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + tags                               = {
          + "Name" = "my_kms_key"
        }
      + tags_all                           = {
          + "Name" = "my_kms_key"
        }
    }

  # module.secret.aws_secretsmanager_secret.secret will be created
  + resource "aws_secretsmanager_secret" "secret" {
      + arn                            = (known after apply)
      + force_overwrite_replica_secret = false
      + id                             = (known after apply)
      + kms_key_id                     = (known after apply)
      + name                           = "alias/default_kms_alish"
      + name_prefix                    = (known after apply)
      + policy                         = (known after apply)
      + recovery_window_in_days        = 30
      + rotation_enabled               = (known after apply)
      + rotation_lambda_arn            = (known after apply)
      + tags                           = {
          + "whodunnit" = "dhruv"
          + "why"       = "testing"
        }
      + tags_all                       = {
          + "whodunnit" = "dhruv"
          + "why"       = "testing"
        }

      + replica {
          + kms_key_id         = (known after apply)
          + last_accessed_date = (known after apply)
          + region             = (known after apply)
          + status             = (known after apply)
          + status_message     = (known after apply)
        }

      + rotation_rules {
          + automatically_after_days = (known after apply)
        }
    }

  # module.secret.aws_secretsmanager_secret_version.secret will be created
  + resource "aws_secretsmanager_secret_version" "secret" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + secret_id      = (known after apply)
      + secret_string  = (sensitive value)
      + version_id     = (known after apply)
      + version_stages = (known after apply)
    }

Plan: 4 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + secret         = {
      + arn                            = (known after apply)
      + description                    = null
      + force_overwrite_replica_secret = false
      + id                             = (known after apply)
      + kms_key_id                     = (known after apply)
      + name                           = "alias/default_kms_alish"
      + name_prefix                    = (known after apply)
      + policy                         = (known after apply)
      + recovery_window_in_days        = 30
      + replica                        = (known after apply)
      + rotation_enabled               = (known after apply)
      + rotation_lambda_arn            = (known after apply)
      + rotation_rules                 = (known after apply)
      + tags                           = {
          + "whodunnit" = "dhruv"
          + "why"       = "testing"
        }
      + tags_all                       = {
          + "whodunnit" = "dhruv"
          + "why"       = "testing"
        }
    }
  + secret_version = (sensitive value)

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
